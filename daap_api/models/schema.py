from typing import Optional

from sqlalchemy import JSON
from sqlalchemy import Column as SAColumn
from sqlmodel import JSON, Field, SQLModel


class Column(SQLModel):
    name: str = Field(
        regex=r"^[a-z0-9_]+$",
        description="The name of a column within your data.",
    )
    type: str = Field(
        regex=r"^(u?(tiny|small|big|)int)|float|double|decimal\(\d{1,2},\s?\d{1,2}\)|char\(\d{1,3}\)|varchar\(\d{0,5}\)|varchar|string|boolean|date|timestamp$",
        description="The data type of the Column. See https://docs.aws.amazon.com/athena/latest/ug/data-types.html",
    )
    description: str = Field(
        description="A description of the column that will feed the data catalogue."
    )


class SchemaBase(SQLModel):
    tableDescription: str = Field(
        description="A description of the data contained within the table",
        schema_extra={
            "example": "this table contains example data for an example data product."
        },
    )

    columns: list[Column] = Field(
        description="A list of objects which relate to columns in your data, each list item will contain, a name of the column, data type of the column and description of the column."
    )


class SchemaCreate(SchemaBase):
    pass


class SchemaRead(SchemaBase):
    pass


class SchemaTable(SchemaBase, table=True):
    id: Optional[int] = Field(
        description="Table unique id. Generated by data platform.",
        schema_extra={"example": "dp:civil-courts-data:v1.1:my-table"},
        default=None,
        primary_key=True,
    )
    columns: list[dict[str, str]] = Field(
        default_factory=list,
        sa_column=SAColumn(JSON),
    )
